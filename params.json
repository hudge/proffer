{"name":"Proffer","body":"[![Build Status](https://secure.travis-ci.org/hudge/proffer.png?branch=master)](http://travis-ci.org/hudge/proffer)\r\n\r\nA module to stop Action Controller from copying every instance variable available\r\nto an action to the view by default. Instead, Proffer provides a way to explicitly\r\nexpose values as local variables within views.\r\n\r\n### Rationale\r\n\r\nBy default, Action Controller will make any instance variables present during an\r\naction available to its views (including partials). This effectively makes them\r\nglobal variables and can obscure their origin when maintaining views. Partials\r\nthat exploit this behaviour can be particularly difficult to maintain as they\r\nmay inherit state from their caller implicitly.\r\n\r\nWe want to see if removing this default behaviour changes the way views are\r\nwritten. By forcing explicit declaration of dependencies, will better, more\r\nencapsulated design result?\r\n\r\n### Usage\r\n\r\nAdd the following to your `Gemfile`:\r\n\r\n```ruby\r\ngem 'proffer'\r\n```\r\n\r\nInclude the `Proffer` module into any controllers you wish (include into\r\n`ApplicationController` to enforce this behaviour throughout your application):\r\n\r\n```ruby\r\nclass PostsController < ApplicationController\r\n  include Proffer\r\n\r\n  # This will make a new Post object available as post in the view but\r\n  # @heading will be nil.\r\n  def new\r\n    @heading = \"New Post\"\r\n    proffer :post => Post.new\r\n  end\r\nend\r\n```\r\n\r\nAny proffered values will then be available to your views by their key:\r\n\r\n```erb\r\n<%= form_for(post) do |f| %>\r\n  ...\r\n<% end %>\r\n```\r\n\r\nYou can test your use of Proffer by inspecting the `proffered` method on your\r\ncontrollers instead of using `assigns` like so:\r\n\r\n```ruby\r\ndescribe FooController do\r\n  describe \"GET index\" do\r\n    it \"only proffers the title\" do\r\n      get :index\r\n      controller.proffered.should == { :title => \"Title\" }\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nNote that if you set `@title` in a Proffer-enabled action, `assigns(:title)`\r\nwill be `nil`.\r\n\r\n### Compatibility\r\n\r\nAs we rely on `ActionController#view_assigns`, this will only work with versions\r\nof Rails 3.0 or later. It is currently tested against Rails 3.2.\r\n\r\n### Disclaimer\r\n\r\nWe have not yet tried this in production so proceed with caution. This gem\r\noverrides `ActionController#view_assigns` and extends `ActionController#render`,\r\nso it may be incompatible with other gems that override these methods.\r\n\r\n### License\r\n\r\nSee LICENSE.txt\r\n","tagline":"An Action Controller module to hide instance variables from views by default.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}